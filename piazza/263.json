{
  "status": "active", 
  "unique_views": 156, 
  "request_instructor_me": false, 
  "change_log": [
    {
      "type": "create", 
      "anon": "no", 
      "when": "2017-09-11T05:14:41Z", 
      "data": "j7fpry39zc4a4", 
      "uid": "hkvdb9dig3v511"
    }, 
    {
      "uid": "gy4twfv45cg5o6", 
      "type": "i_answer", 
      "when": "2017-09-11T13:17:25Z", 
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "data": "j7g70qy7ao2yy"
    }, 
    {
      "type": "i_answer_update", 
      "anon": "no", 
      "when": "2017-09-11T14:19:41Z", 
      "data": "j7g98ti6i88xu", 
      "uid": "gy4twfv45cg5o6"
    }, 
    {
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "when": "2017-09-12T00:26:09Z", 
      "type": "followup", 
      "uid": "i4g1slpjbgk6g0"
    }, 
    {
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "when": "2017-09-12T00:49:59Z", 
      "type": "feedback", 
      "uid": "gy4twfv45cg5o6"
    }, 
    {
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "when": "2017-09-12T00:52:56Z", 
      "type": "feedback", 
      "uid": "i4g1slpjbgk6g0"
    }, 
    {
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "when": "2017-09-12T00:56:19Z", 
      "type": "followup", 
      "uid": "hkvdb9dig3v511"
    }, 
    {
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "when": "2017-09-12T01:00:50Z", 
      "type": "feedback", 
      "uid": "gy4twfv45cg5o6"
    }, 
    {
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "when": "2017-09-12T01:01:34Z", 
      "type": "feedback", 
      "uid": "hkvdb9dig3v511"
    }, 
    {
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "when": "2017-09-12T01:02:29Z", 
      "type": "feedback", 
      "uid": "gy4twfv45cg5o6"
    }, 
    {
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "when": "2017-09-12T01:03:15Z", 
      "type": "feedback", 
      "uid": "gy4twfv45cg5o6"
    }, 
    {
      "to": "j7fpry3879o4a3", 
      "anon": "no", 
      "when": "2017-09-12T01:11:45Z", 
      "type": "feedback", 
      "uid": "i4g1slpjbgk6g0"
    }
  ], 
  "upvote_ids": [], 
  "id": "j7fpry3879o4a3", 
  "bookmarked": 5, 
  "no_answer": 0, 
  "i_edits": [], 
  "is_bookmarked": false, 
  "children": [
    {
      "folders": [], 
      "is_tag_endorse": false, 
      "created": "2017-09-11T13:17:25Z", 
      "type": "i_answer", 
      "tag_endorse_arr": [], 
      "id": "j7g70qy4ekf2yx", 
      "bucket_name": "Today", 
      "config": {}, 
      "tag_endorse": [], 
      "bucket_order": 2, 
      "data": {
        "embed_links": []
      }, 
      "children": [], 
      "history": [
        {
          "content": "<p></p>\n<p>Why is Fast Select called with n/10 elements? \u00a0Isn&#39;t it called with a subarray of size n/5, one element per group? \u00a0Just k=n/10, right?</p>\n<p></p>\n<p>There is an issue with the subarrays $$A_{&lt;p}, A_{&gt;p}$$ being powers of 5, so really you need to do the algorithm with floors and ceilings worked in appropriately. \u00a0</p>\n<p></p>\n<p>Yes, there is a base case. \u00a0I assume you can figure it out.</p>\n<p></p>\n<p>--Eric</p>", 
          "anon": "no", 
          "created": "2017-09-11T14:19:41Z", 
          "uid": "gy4twfv45cg5o6", 
          "subject": ""
        }, 
        {
          "content": "<p></p>\n<p>Either assume that n is a power of 5 and 2 (so a power of 10) or work in floors and ceilings into the algorithm description.</p>\n<p></p>\n<p>Yes, there is a base case. \u00a0I assume you can figure it out.</p>\n<p></p>\n<p>--Eric</p>", 
          "anon": "no", 
          "created": "2017-09-11T13:17:25Z", 
          "uid": "gy4twfv45cg5o6", 
          "subject": ""
        }
      ]
    }, 
    {
      "folders": [], 
      "updated": "2017-09-12T00:26:09Z", 
      "no_upvotes": 0, 
      "uid": "i4g1slpjbgk6g0", 
      "created": "2017-09-12T00:26:09Z", 
      "type": "followup", 
      "no_answer": 0, 
      "id": "j7guwr2ha74lj", 
      "anon": "no", 
      "bucket_name": "Today", 
      "config": {}, 
      "bucket_order": 2, 
      "data": {
        "embed_links": null
      }, 
      "children": [
        {
          "folders": [], 
          "updated": "2017-09-12T00:49:59Z", 
          "uid": "gy4twfv45cg5o6", 
          "created": "2017-09-12T00:49:59Z", 
          "type": "feedback", 
          "id": "j7gvre50o8h60d", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p></p>\n<p>The pivot p is what you get from step 4. \u00a0</p>"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-12T00:52:56Z", 
          "uid": "i4g1slpjbgk6g0", 
          "created": "2017-09-12T00:52:56Z", 
          "type": "feedback", 
          "id": "j7gvv6sitq17z", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p>Yes, but how do you &#34;Recurse&#34; using the Select code? \u00a0For example, let&#39;s say the A&lt;P partition is much larger that k. \u00a0So you have to &#34;Recurse&#34; with Select code into that array, calling Select(A&lt;P, k). \u00a0Within Select code, you have to pick a Partition. \u00a0You obviously cannot reuse the Partition inside the recursive call. \u00a0That&#39;s where I&#39;m stuck.</p>"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-12T01:02:29Z", 
          "uid": "gy4twfv45cg5o6", 
          "created": "2017-09-12T01:02:29Z", 
          "type": "feedback", 
          "id": "j7gw7h58aj4vo", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p></p>\n<p>You recursively run FastSelect. \u00a0E.g., if the k-th smallest is in A&lt;p then you recursively run FastSelect(A&lt;p,k).</p>"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-12T01:11:45Z", 
          "uid": "i4g1slpjbgk6g0", 
          "created": "2017-09-12T01:11:45Z", 
          "type": "feedback", 
          "id": "j7gwjdyini2b5", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p>Okay, thanks. \u00a0The lecture says you call Select, so that&#39;s where I was confused.</p>"
        }
      ], 
      "subject": "<p>I&#39;d like to follow up on this. \u00a0The Pseudocode is missing enough pieces to make is very difficult to implement (referencing 12. Median: Pseudocode lecture at\u00a0<a href=\"https://classroom.udacity.com/courses/ud401/lessons/10090188016/concepts/100938679570923\">https://classroom.udacity.com/courses/ud401/lessons/10090188016/concepts/100938679570923</a>).</p>\n<p></p>\n<p>Specifically, how do you implement &#34;#6 Recurse on A&lt;P or A&gt;P or output P....&#34;? \u00a0The lecture says, to call Select(A&lt;P, k) or equivalent. \u00a0However, there&#39;s a problem, the original Select pseudo code requires you to pick a good P partition. \u00a0How do you pick a good P partition inside the original quick Select code?</p>"
    }, 
    {
      "folders": [], 
      "updated": "2017-09-12T00:56:19Z", 
      "no_upvotes": 0, 
      "uid": "hkvdb9dig3v511", 
      "created": "2017-09-12T00:56:19Z", 
      "type": "followup", 
      "no_answer": 0, 
      "id": "j7gvzjo1gbs66t", 
      "anon": "no", 
      "bucket_name": "Today", 
      "config": {}, 
      "bucket_order": 2, 
      "data": {
        "embed_links": null
      }, 
      "children": [
        {
          "folders": [], 
          "updated": "2017-09-12T01:00:50Z", 
          "uid": "gy4twfv45cg5o6", 
          "created": "2017-09-12T01:00:50Z", 
          "type": "feedback", 
          "id": "j7gw5d3eovu7dt", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p></p>\n<p>Yes, the base case is missing, it&#39;s as you wrote. \u00a0I assume you can figure that out.</p>"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-12T01:01:34Z", 
          "uid": "hkvdb9dig3v511", 
          "created": "2017-09-12T01:01:34Z", 
          "type": "feedback", 
          "id": "j7gw6av9fvz73y", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p>haha! \u00a0Usually the psuedo code is really thorough, so I just assumed I was loosing my mind. \u00a0Thanks for clarifying it.</p>"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-12T01:03:15Z", 
          "uid": "gy4twfv45cg5o6", 
          "created": "2017-09-12T01:03:15Z", 
          "type": "feedback", 
          "id": "j7gw8gl46251lg", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p></p>\n<p>It&#39;s not meant to be code that you can implement. \u00a0It&#39;s meant to be the main/key ideas.</p>"
        }
      ], 
      "subject": "<p>I also agree, its like the base case is missing from the psuedo code. \u00a0I would imagine base case should be something like:</p>\n<p></p>\n<p>if |S| == 1:</p>\n<p>\u00a0 \u00a0 \u00a0return median of S</p>\n<p></p>\n<p></p>\n<p>But that isn&#39;t there? \u00a0So What am I missing? \u00a0Is it just assumed that is supposed to be the base case? \u00a0</p>"
    }
  ], 
  "nr": 263, 
  "bucket_order": 2, 
  "type": "question", 
  "folders": [
    "hw3"
  ], 
  "no_answer_followup": 0, 
  "num_favorites": 3, 
  "bucket_name": "Today", 
  "q_edits": [], 
  "data": {
    "embed_links": []
  }, 
  "request_instructor": 0, 
  "tags": [
    "hw3", 
    "student"
  ], 
  "created": "2017-09-11T05:14:41Z", 
  "is_tag_good": false, 
  "config": {}, 
  "s_edits": [], 
  "my_favorite": false, 
  "default_anonymity": "no", 
  "t": 1509145258691, 
  "tag_good": [], 
  "tag_good_arr": [], 
  "history": [
    {
      "content": "<p>I am a little confused the psuedo code for the \u00a0Linear Time Median Algorithm. \u00a0My questions are:</p>\n<p></p>\n<p>1. \u00a0Lets say I assume there are 125 elements (5^3). \u00a0This means there are n/5 = 25 groups of 5 elements each. \u00a0However, when FastSelect is recursively called its given n/10 which will be a non-integer value of 25 / 10. \u00a0I understand that the recursive call is supposed to find the median of the medians, and is the halfway point of the 25 elements. \u00a0However, Is there something wrong with my understanding? \u00a0</p>\n<p></p>\n<p>2. \u00a0Also I do not see a\u00a0base case. \u00a0Eventually you will recurse down to the point where there is just one element in S (125 elements 5 elements per group -&gt; 25 groups -&gt; 5 groups - &gt; 1 group \u00a0-&gt; 1 element). \u00a0I guess the function is supposed to return something here? \u00a0\u00a0</p>\n<p></p>\n<p>I feel like I must have a misunderstanding somewhere that is really stupid. \u00a0But after staring at it for a long time, I decided that I should ask for help. \u00a0Thanks in advance. \u00a0</p>", 
      "anon": "no", 
      "created": "2017-09-11T05:14:41Z", 
      "uid": "hkvdb9dig3v511", 
      "subject": "Linear Time Median Algorithm: Base Case &amp; n/10 In"
    }
  ]
}