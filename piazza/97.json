{
  "status": "active", 
  "unique_views": 202, 
  "request_instructor_me": false, 
  "change_log": [
    {
      "type": "create", 
      "anon": "no", 
      "when": "2017-08-28T00:42:27Z", 
      "data": "j6vfvxs1n1154h", 
      "uid": "hq8hn0qyfuvyr"
    }, 
    {
      "uid": "hkjzzued3ef4xh", 
      "type": "i_answer", 
      "when": "2017-08-28T00:47:50Z", 
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "data": "j6vg2umc3igdh"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-08-29T03:02:42Z", 
      "type": "followup", 
      "uid": "ijawwe19w053cm"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-01T02:41:41Z", 
      "type": "followup", 
      "uid": "hviwm6agQCk"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-01T12:09:12Z", 
      "type": "feedback", 
      "uid": "i4nkipeofrkrz"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-01T17:46:36Z", 
      "type": "feedback", 
      "uid": "hviwm6agQCk"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-01T18:29:40Z", 
      "type": "feedback", 
      "uid": "i4nkipeofrkrz"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-01T18:38:58Z", 
      "type": "feedback", 
      "uid": "hviwm6agQCk"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-01T18:57:36Z", 
      "type": "feedback", 
      "uid": "i4nkipeofrkrz"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-01T19:22:19Z", 
      "type": "feedback", 
      "uid": "hviwm6agQCk"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-03T15:29:17Z", 
      "type": "followup", 
      "uid": "hz6fs7qs6ps161"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-03T16:16:12Z", 
      "type": "feedback", 
      "uid": "i4nkipeofrkrz"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-03T16:25:14Z", 
      "type": "feedback", 
      "uid": "hz6fs7qs6ps161"
    }, 
    {
      "to": "j6vfvxrzu2454g", 
      "anon": "no", 
      "when": "2017-09-03T19:08:55Z", 
      "type": "feedback", 
      "uid": "hz0jkj9dnctqp"
    }
  ], 
  "upvote_ids": [], 
  "id": "j6vfvxrzu2454g", 
  "bookmarked": 7, 
  "no_answer": 0, 
  "i_edits": [], 
  "is_bookmarked": false, 
  "children": [
    {
      "folders": [], 
      "is_tag_endorse": false, 
      "created": "2017-08-28T00:47:50Z", 
      "type": "i_answer", 
      "tag_endorse_arr": [], 
      "id": "j6vg2uma395dg", 
      "bucket_name": "Today", 
      "config": {}, 
      "tag_endorse": [], 
      "bucket_order": 2, 
      "data": {
        "embed_links": []
      }, 
      "children": [], 
      "history": [
        {
          "content": "<p>Maybe you can talk about what you think and let&#39;s see what we can help.</p>\n<p></p>\n<p>Basically you want to fill a table of size $$O(n^2)$$, and each entry takes $$O(1)$$ time to update. Try to design a dp algorithm (define the table, find the recurrence relation) with this goal.</p>", 
          "anon": "no", 
          "created": "2017-08-28T00:47:50Z", 
          "uid": "hkjzzued3ef4xh", 
          "subject": ""
        }
      ]
    }, 
    {
      "folders": [], 
      "updated": "2017-08-29T03:02:42Z", 
      "no_upvotes": 0, 
      "uid": "ijawwe19w053cm", 
      "created": "2017-08-29T03:02:42Z", 
      "type": "followup", 
      "no_answer": 0, 
      "id": "j6x0c5pxol062d", 
      "anon": "no", 
      "bucket_name": "Last week", 
      "config": {}, 
      "bucket_order": 5, 
      "data": {
        "embed_links": null
      }, 
      "children": [], 
      "subject": "leetcode has it"
    }, 
    {
      "folders": [], 
      "updated": "2017-09-01T02:41:41Z", 
      "no_upvotes": 0, 
      "uid": "hviwm6agQCk", 
      "created": "2017-09-01T02:41:41Z", 
      "type": "followup", 
      "no_answer": 0, 
      "id": "j719wo42dzi6me", 
      "anon": "no", 
      "bucket_name": "Last week", 
      "config": {}, 
      "bucket_order": 5, 
      "data": {
        "embed_links": null
      }, 
      "children": [
        {
          "folders": [], 
          "updated": "2017-09-01T12:09:12Z", 
          "uid": "i4nkipeofrkrz", 
          "created": "2017-09-01T12:09:12Z", 
          "type": "feedback", 
          "id": "j71u6hxjloh6ce", 
          "anon": "no", 
          "bucket_name": "Last week", 
          "config": {}, 
          "bucket_order": 5, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p>I think you should be fine driving the results from the content of your table.</p>\n<p></p>\n<p>That being said, make sure your recurrence definition explains how to derive this solution.</p>\n<p></p>\n<p>For example, you shouldn&#39;t have a recurrence T(i, j) that returns a count, when your problem is asking you\u00a0for a boolean result. To get around this, you can define two things:</p>\n<p></p>\n<p>1) T(i, j) -----&gt; count</p>\n<p>2) S(i, j) -----&gt; Returns True/False by using T(i,j) and comparing the count with something.</p>\n<p></p>\n<p>So you&#39;ll get two\u00a0functions as part as your solution.</p>\n<p></p>\n<p>Hope this makes sense.</p>\n<p></p>\n<p></p>"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-01T17:46:36Z", 
          "uid": "hviwm6agQCk", 
          "created": "2017-09-01T17:46:36Z", 
          "type": "feedback", 
          "id": "j7268eqob39kn", 
          "anon": "no", 
          "bucket_name": "Last week", 
          "config": {}, 
          "bucket_order": 5, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "It makes sense, but why does my S(i,j) have to be 2d? Can&#39;t I just keep a running count of max length and then override it when a new contender arrives? Is there value added in looping through two 2-d tables instead of the running count method?\n\nUpdate...nevermind I think there&#39;s a way to get what I want both ways without having to loop through a second table."
        }, 
        {
          "folders": [], 
          "updated": "2017-09-01T18:29:40Z", 
          "uid": "i4nkipeofrkrz", 
          "created": "2017-09-01T18:29:40Z", 
          "type": "feedback", 
          "id": "j727rs8wvrh4te", 
          "anon": "no", 
          "bucket_name": "Last week", 
          "config": {}, 
          "bucket_order": 5, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p>Correct. Notice that my example above doesn&#39;t have two different tables; it uses only one: T(i,j).\u00a0</p>\n<p></p>\n<p>S(i,j) is not a table in the pseudocode.</p>\n<p></p>"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-01T18:38:58Z", 
          "uid": "hviwm6agQCk", 
          "created": "2017-09-01T18:38:58Z", 
          "type": "feedback", 
          "id": "j7283r7l2mu1hf", 
          "anon": "no", 
          "bucket_name": "Last week", 
          "config": {}, 
          "bucket_order": 5, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "...wait S(i,j) is a table in the pseudocode, it&#39;s just that you don&#39;t have to iterate over it separately from T(i,j) as much as you set it in linear time right? Because if I have something with an i and j it&#39;s a 2-d something."
        }, 
        {
          "folders": [], 
          "updated": "2017-09-01T18:57:36Z", 
          "uid": "i4nkipeofrkrz", 
          "created": "2017-09-01T18:57:36Z", 
          "type": "feedback", 
          "id": "j728rq3d2r877x", 
          "anon": "no", 
          "bucket_name": "Last week", 
          "config": {}, 
          "bucket_order": 5, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p>Nope, not a table necessarily.\u00a0</p>\n<p></p>\n<p>Here is an example:\u00a0<a href=\"https://en.wikipedia.org/wiki/Longest_common_substring_problem\">https://en.wikipedia.org/wiki/Longest_common_substring_problem</a>. Notice how they have LCStuff and LCSubstr, but LCSubstr is not a table in the pseudocode.</p>\n<p></p>\n<p></p>"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-01T19:22:19Z", 
          "uid": "hviwm6agQCk", 
          "created": "2017-09-01T19:22:19Z", 
          "type": "feedback", 
          "id": "j729nhy82qk7hd", 
          "anon": "no", 
          "bucket_name": "Last week", 
          "config": {}, 
          "bucket_order": 5, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "whoa"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-03T19:08:55Z", 
          "uid": "hz0jkj9dnctqp", 
          "created": "2017-09-03T19:08:55Z", 
          "type": "feedback", 
          "id": "j7541z1pb6j60p", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p>It&#39;s a function, not a table. That&#39;s very confusing. Why can&#39;t they use [] for the table and () for the function?</p>"
        }
      ], 
      "subject": "Does our T(i,j) have to contain within it the end result of problem? For instance does our solution for the max length of substring have to be contained within T(i,j) itself, or can we just use T(i,j) as a stepping stone to get the max length calculated in psuedocode? You spoke above of a table that is n^2, so are you expecting it would be filled with different lengths, or can it be filled with whatever I want as long as I derive the correct answer from its contents?"
    }, 
    {
      "folders": [], 
      "updated": "2017-09-03T15:29:17Z", 
      "no_upvotes": 0, 
      "uid": "hz6fs7qs6ps161", 
      "created": "2017-09-03T15:29:17Z", 
      "type": "followup", 
      "no_answer": 0, 
      "id": "j74w7isw3p2146", 
      "anon": "no", 
      "bucket_name": "Today", 
      "config": {}, 
      "bucket_order": 2, 
      "data": {
        "embed_links": null
      }, 
      "children": [
        {
          "folders": [], 
          "updated": "2017-09-03T16:16:12Z", 
          "uid": "i4nkipeofrkrz", 
          "created": "2017-09-03T16:16:12Z", 
          "type": "feedback", 
          "id": "j74xvupke6d30j", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p>You can solve the problem in $$O(n^2)$$ with a 2D table.</p>\n<p></p>\n<p>What information do you need to store in the table to solve your problem definition? For each character, you&#39;ll have the following possibilities:</p>\n<p></p>\n<p>a) Using this character you can form a new (longer) palindromic subsequence.</p>\n<p>b) This character doesn&#39;t extend an existing palindromic subsequence.\u00a0</p>\n<p></p>\n<p>What do you do in every case?</p>"
        }, 
        {
          "folders": [], 
          "updated": "2017-09-03T16:25:14Z", 
          "uid": "hz6fs7qs6ps161", 
          "created": "2017-09-03T16:25:14Z", 
          "type": "feedback", 
          "id": "j74y7h6jwy43j9", 
          "anon": "no", 
          "bucket_name": "Today", 
          "config": {}, 
          "bucket_order": 2, 
          "data": {
            "embed_links": null
          }, 
          "children": [], 
          "subject": "<p>sure thanks. I had the recursion done. I was mostly struggling with filling up the table.</p>\n<p>I just\u00a0watched the chain multiply videos. Now, I am able to draw my 2D table with upper diagonal filled in O(n^2).</p>"
        }
      ], 
      "subject": "<p>I am facing difficulty converting Palindromic subsequence recursion to DP table.</p>\n<p>So,I am basically using the Longest Common Subsequence solution to come up with Palindromic subsequence. This way it helps build the DP table easily.</p>\n<p>In both the cases my solution would be O(n^2).</p>\n<p>Any link to understand building the DP table for first approach?</p>"
    }
  ], 
  "nr": 97, 
  "bucket_order": 2, 
  "type": "question", 
  "folders": [
    "dp-solutions"
  ], 
  "no_answer_followup": 0, 
  "num_favorites": 1, 
  "bucket_name": "Today", 
  "q_edits": [], 
  "data": {
    "embed_links": []
  }, 
  "request_instructor": 0, 
  "tags": [
    "dp-solutions", 
    "student"
  ], 
  "created": "2017-08-28T00:42:27Z", 
  "is_tag_good": false, 
  "config": {}, 
  "s_edits": [], 
  "my_favorite": false, 
  "default_anonymity": "no", 
  "t": 1509145306127, 
  "tag_good": [], 
  "tag_good_arr": [], 
  "history": [
    {
      "content": "After working on it for several hours, I finally have a solution to DPV Problem 6.7 - Palindrome Subsequence. However, it is not O(n^2). Has anyone been able to get an O(n^2) solution?", 
      "anon": "no", 
      "created": "2017-08-28T00:42:27Z", 
      "uid": "hq8hn0qyfuvyr", 
      "subject": "Palindrome Subsequence: O(n^2) ?"
    }
  ]
}