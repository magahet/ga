{
  "status": "active", 
  "unique_views": 133, 
  "request_instructor_me": false, 
  "change_log": [
    {
      "type": "create", 
      "anon": "no", 
      "when": "2017-09-11T02:36:11Z", 
      "data": "j7fk44hw2th482", 
      "uid": "hz0pec4uduL"
    }, 
    {
      "to": "j7fk44hu9ut481", 
      "anon": "no", 
      "when": "2017-09-11T14:45:32Z", 
      "type": "followup", 
      "uid": "ijbr5ddtwyt6pa"
    }, 
    {
      "uid": "hkkbz4bujtv5dn", 
      "type": "i_answer", 
      "when": "2017-09-12T04:12:47Z", 
      "to": "j7fk44hu9ut481", 
      "anon": "no", 
      "data": "j7h307oeo1g3s4"
    }
  ], 
  "upvote_ids": [], 
  "id": "j7fk44hu9ut481", 
  "bookmarked": 5, 
  "no_answer": 0, 
  "i_edits": [], 
  "is_bookmarked": false, 
  "children": [
    {
      "folders": [], 
      "updated": "2017-09-11T14:45:32Z", 
      "d-bucket": "Yesterday", 
      "no_upvotes": 0, 
      "uid": "ijbr5ddtwyt6pa", 
      "created": "2017-09-11T14:45:32Z", 
      "type": "followup", 
      "no_answer": 0, 
      "id": "j7ga62eldui6er", 
      "anon": "no", 
      "bucket_name": "Yesterday", 
      "config": {}, 
      "bucket_order": 3, 
      "data": {
        "embed_links": null
      }, 
      "children": [], 
      "subject": "<p>I think its a different approach, since you use recursion instead of recurrence cases, but I don&#39;t see why not (if it follows that). As in, you recursively send a table or vector. I find the thought process is similar. Split the function into smaller sub functions and use those to get your anwsers</p>"
    }, 
    {
      "folders": [], 
      "is_tag_endorse": false, 
      "created": "2017-09-12T04:12:47Z", 
      "type": "i_answer", 
      "tag_endorse_arr": [
        "hz0pec4uduL"
      ], 
      "id": "j7h307o6nle3s3", 
      "bucket_name": "Today", 
      "config": {}, 
      "tag_endorse": [
        {
          "name": "Hugh Woltzen", 
          "admin": false, 
          "photo": "1423117810_35.png", 
          "us": false, 
          "role": "student", 
          "facebook_id": null, 
          "id": "hz0pec4uduL"
        }
      ], 
      "bucket_order": 2, 
      "data": {
        "embed_links": []
      }, 
      "children": [], 
      "history": [
        {
          "content": "<p>I think the general divide-and-conquer methodology\u00a0is\u00a0something like:</p>\n<p>1) divide the current problem into smaller-size subproblems</p>\n<p>2) &#34;conquer&#34; those subproblems, and combine the solutions to solve the current problem</p>\n<p></p>\n<p>And analyzing the runtime of\u00a0D&amp;C algorithms usually just involves solving\u00a0the recurrence relation.</p>\n<p></p>", 
          "anon": "no", 
          "created": "2017-09-12T04:12:47Z", 
          "uid": "hkkbz4bujtv5dn", 
          "subject": ""
        }
      ]
    }
  ], 
  "nr": 261, 
  "bucket_order": 2, 
  "type": "question", 
  "folders": [
    "divide_and_conquer"
  ], 
  "no_answer_followup": 0, 
  "num_favorites": 2, 
  "bucket_name": "Today", 
  "q_edits": [], 
  "data": {
    "embed_links": []
  }, 
  "request_instructor": 0, 
  "tags": [
    "divide_and_conquer", 
    "student"
  ], 
  "created": "2017-09-11T02:36:11Z", 
  "is_tag_good": false, 
  "config": {}, 
  "s_edits": [], 
  "my_favorite": false, 
  "default_anonymity": "no", 
  "t": 1509145259503, 
  "tag_good": [
    {
      "name": "Joe Munoz", 
      "admin": false, 
      "photo": "1420754121_35.png", 
      "us": false, 
      "role": "student", 
      "facebook_id": null, 
      "id": "i4ocg4bx2t93x9"
    }
  ], 
  "tag_good_arr": [
    "i4ocg4bx2t93x9"
  ], 
  "history": [
    {
      "content": "<p>I found the methodology\u00a0we were taught for dynamic programming very helpful: define table, define recurrence and analyze the runtime. Is there any type of methodology that can be used for divide and conquer?\u00a0</p>", 
      "anon": "no", 
      "created": "2017-09-11T02:36:11Z", 
      "uid": "hz0pec4uduL", 
      "subject": "Divide and Conquer Methodology"
    }
  ]
}